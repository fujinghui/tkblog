function FemyObject(){}

var femy = new FemyObject();
FemyObject.prototype.view_server = null;
FemyObject.prototype.data_server = null;
FemyObject.prototype.filter_a = function(e){
	var $this = this;
	if(!$this.getAttribute("href") || $this.getAttribute("href").length <= 0)
	{
		return;
	}
	if($this.getAttribute("href").substr(0, 7) == "http://")
	{
		//yes default event
		console.log("allow");
		return;
	}

	if(e && e.preventDefault)
		e.preventDefault();
	else
		window.event.returnValue = false;
	//console.log(femy);
	//no href attr! nothing do

	//var url = femy.view_server+$this.getAttribute("href");
	//window.location.href=url;
	//console.log($this.getAttribute("href")+" the link no skip!");
}

FemyObject.prototype.filter_click = function(event){
	var ele = event.srcElement;
	if(ele.tagName == "A")
	{
		if(event && event.preventDefault)
			event.preventDefault();				//forbid
		else
			window.event.returnValue = false;
	}
	//console.log(event.srcElement);
}

FemyObject.prototype.init = function(param) {
	if(param)
	{
		if(param.view_server)
			this.view_server = param.view_server;
		if(param.data_server)
			this.data_server = param.data_server;
	}
	var $this = this;
	window.onload = function(){
		//deal a
		var as = document.getElementsByTagName("a");
		for(var i = 0; i < as.length; i ++)
			;//as[i].onclick = $this.filter_a;
		//deal xmp

	}
};
FemyObject.prototype.tpldata = {};				//global fengine render data
FemyObject.prototype.useToTPL = function(rd, nid){
	for(nattr in nid)
	{
		if(typeof(nid[nattr]) == "object")		//child is object
		{
			if(rd[nattr])
			{
				//console.log(rd[nattr])
				useToTPL(rd[nattr], nid[nattr]);	//entry next level
			}
			else
			{
				rd[nattr] = nid[nattr];
			}
		}
		else
		{
			rd[nattr] = nid[nattr];
		}
	}
}
FemyObject.prototype.use = function(param){
	if(param != null && typeof(param) == "object")
	{
		//this.useToTPL(this.tpldata, param);
		this.useToTPL(window, param);
		//console.log(this.tpldata);
		//window = this.tpldata;
	}
}
FemyObject.prototype.render = function(){				//render template data
	//call template engine
	initEngine("xmp", "fengine");
}
// 	var self = this;
// 	var html = self.replace(/{{([^{}]+)?}}/g, function(k, v){
// 		//console.log(k+":"+v);
// 		if(data[v])
// 			return data[v];
// 		return "";
// 	});
// 	return html;
// }
// var fnn = new Function("data", "var r = []; for (var i in data){r.push(data[i])} return r.join('');");
// a = fnn({"name":"fujinghui", "age":"20"});
//console.log(a);
var FEngine = function(tpl, data){
	//var reg = /{{([^}]+)}}/g;
	//var reg = /{{([^{{])+}}/g;
	var reg = /{{((?!\{\{)(?!\}\}).)+}}/g;
	var code = "var r=[];\n";
	var cursor = 0;
	var add = function(line, js){
		//version 1.0
		//code += "r.push(\""+line.replace(/"/g, '\\"')+"\");\n";
		
		//version 2.0
		//var regOut = /(^( )?(if|for|else|switch|case|break|var\ +[^\d\ ][a-zA-Z\d ]+=|[a-zA-Z][a-zA-Z\d]*\ *\+\+|\{|\}) ?)(.*)?/g;
		var regOut = /((console.log|if|for|else|switch|case|break|var\ +[^\d\ ][a-zA-Z\d ]+=|[a-zA-Z][a-zA-Z\d]*\ *\+\+|\{|\}) ?)(.*)?/g;
		//js?code+=line.match(regOut)?line+'\n':'r.push('+line+');\n':
		//code+='r.push("'+line.replace(/"/g, '\\"')+'");\n';
		//version 2.1.0
		//console.log(line);
		//if(line.match(regOut))
		//console.log(line);
		line = line.replace(/\n|\t|\r/g, "");
		js?(code +=line.match(regOut)?line+'\n':"r.push("+line.replace(/"/g,'\\"')+");\n"):code+="r.push(\""+line.replace(/"/g, '\\"')+"\");\n";
		
		//version 3.0
		//var regOut = /[a-zA-Z]([a-zA-Z\d_]*)?((\.[a-zA-Z][a-zA-Z\d_]*)*)?/g;
		//line = line.replace(/\n|\t|\r/g, "");
		//js?(code +=line.match(regOut)?"r.push(fd."+line.replace(/"/g,'\\"')+");\n":line+'\n'):code+="r.push(\""+line.replace(/"/g, '\\"')+"\");\n";
		
		return add;
	}
	while(match=reg.exec(tpl))
	{
		//console.log(match);
		add(tpl.slice(cursor, match.index))(match[0].slice(2,match[0].length-2), true);
		cursor = match.index + match[0].length;
	}
	add(tpl.substr(cursor, tpl.length - cursor));
	code += 'return r.join("");';
	//other function
	return new Function(code).apply(data);
	//self function
	var aFun = new Function("fd", code);
	return aFun(data);
	//console.log(new Function(code).apply(data));

}
function initEngine(tag_name, id){
	var parent = null;
	var removes = [];
	var ts = document.getElementsByTagName(tag_name);
	var divs = document.getElementsByTagName("div");
	var divs_del = [];
	//before clear div
	for(var di = 0; di < divs.length; di ++)
	{
		//judge is right
		if(divs[di].getAttribute("id") && !divs[di].getAttribute("fixed") && divs[di].getAttribute("id").substr(0, id.length)==id)
		{
			divs_del.push(divs[di]);
		}
	}
	//delete div
	for(var i = 0; i < divs_del.length; i ++)
	{
		var p= divs_del[i].parentNode;
		p.removeChild(divs_del[i]);
	}
	for(var i = 0; i < ts.length; i ++)
	{
		if(ts[i].id == id && !ts[i].getAttribute("no_render"))
		{
			var tpl = ts[i].innerHTML;
			tpl.replace(/\n/g, "");
			var rd = FEngine(tpl, femy.tpldata);		//use femy tpldata
			//ts[i].innerHTML = rd;

			parent = ts[i].parentNode;
			var div = document.createElement("div");	//create new element
			div.innerHTML = rd;
			div.setAttribute("id", id+"_"+i);
			//set fixed(only one to render)
			if(ts[i].getAttribute("fixed"))
			{
				div.setAttribute("fixed", "fixed");
				ts[i].setAttribute("no_render", true);	//set no render at next time
			}
			parent.insertBefore(div, ts[i]);			//insert current element before

			removes.push(ts[i]);						//remove template element
		}
	}
	//remove
	for(var i = 0; i < removes.length; i ++)
	{
		//parent.removeChild(removes[i]);
		removes[i].style.display = "none";
	}
	return;
}

var time = new Date().valueOf();

window.addEventListener("load", function(){
	var xmps = document.getElementsByTagName("xmp");
	for(var i = 0; i < xmps.length; i ++)
	{
		xmps[i].style.display = "none";
	}
});
document.addEventListener("mousedown", femy.filter_click);
//console.log("tpl:"+FEngine(tpl, data));
// var rdata = FEngine(tpl, data);
// time = new Date().valueOf()-time;
// console.log("time:"+time);
// console.log("data length:"+rdata.length);
// console.log("data:"+rdata);
// function PPP(a, b, c){
// 	console.log(arguments);

// }
// PPP("fu", "jing", "hui");
// console.log(0.1+0.2);